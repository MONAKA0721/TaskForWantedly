{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["List","props","react_default","a","createElement","todo","map","i","key","type","value","onClick","deleteTodo","title","Input","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTodo","bind","assertThisInitialized","refs","newText","ref","Component","App","_this2","state","push","setState","splice","App_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEA,SAASA,EAAKC,GACZ,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,KAAKC,IAAK,SAACD,EAAME,GACtB,OAAOL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,GAAT,IAAaL,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASC,MAAM,SACzBC,QAAS,kBAAMV,EAAMW,WAAWL,MAD/C,IACsDF,EAAKQ,cAMpEC,cACJ,SAAAA,EAAYb,GAAM,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDqB,QAAUP,EAAKO,QAAQC,KAAbP,OAAAQ,EAAA,EAAAR,CAAAD,IAFCA,yEAKhBG,KAAKjB,MAAMqB,QAAQJ,KAAKO,KAAKC,QAAQhB,OACrCQ,KAAKO,KAAKC,QAAQhB,MAAM,oCAGxB,OACER,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOkB,IAAI,YACvBzB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASC,MAAM,eAAKC,QAASO,KAAKI,kBAbpCM,aAkELC,cA9Cb,SAAAA,EAAY5B,GAAM,IAAA6B,EAAA,OAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IAChBC,EAAAd,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMjB,KACD8B,MAAQ,CACX1B,KAAM,CACL,CAAEQ,MAAO,gCACT,CAAEA,MAAO,4BACT,CAAEA,MAAO,4BACT,CAAEA,MAAO,6BAGZiB,EAAKR,QAAUQ,EAAKR,QAAQC,KAAbP,OAAAQ,EAAA,EAAAR,CAAAc,IACfA,EAAKlB,WAAakB,EAAKlB,WAAWW,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAc,IAXFA,uEAcVpB,GAENQ,KAAKa,MAAM1B,KAAK2B,KAAK,CACnBnB,MAAOH,IAGTQ,KAAKe,SAAS,CACZ5B,KAAOa,KAAKa,MAAM1B,0CAKXE,GAETW,KAAKa,MAAM1B,KAAK6B,OAAO3B,EAAG,GAE1BW,KAAKe,SAAS,CACZ5B,KAAOa,KAAKa,MAAM1B,wCAKpB,OACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACJ,EAAD,CAAMK,KAAMa,KAAKa,MAAM1B,KAAMO,WAAYM,KAAKN,aAC9CV,EAAAC,EAAAC,cAAC+B,EAAD,CAAOb,QAASJ,KAAKI,kBAzCXM,aCpBEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13b07403.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nfunction List(props){\n  return (\n    <ul>\n      {props.todo.map( (todo, i) => {\n        return <li key={i}> <input type=\"button\" value=\"☓\"\n                              onClick={() => props.deleteTodo(i)}/> {todo.title}</li>\n      })}\n    </ul>\n  )\n};\n\nclass Input extends Component {\n  constructor(props){\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n  }\n  addTodo(){\n    this.props.addTodo(this.refs.newText.value);\n    this.refs.newText.value='';\n  }\n  render() {\n    return (\n      <div>\n          <input type=\"text\" ref=\"newText\"/>\n          <input type=\"button\" value=\"追加\" onClick={this.addTodo}/>\n      </div>\n    )\n  }\n};\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todo: [\n       { title: 'JavaScript覚える' } ,\n       { title: 'jQuery覚える' } ,\n       { title: 'ES2015覚える' } ,\n       { title: 'React覚える' }\n      ]\n    };\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n  }\n  // 新規追加\n  addTodo(value) {\n    // 追加\n    this.state.todo.push({\n      title: value\n    });\n    // 保存\n    this.setState({\n      todo : this.state.todo\n    });\n  }\n\n  // 削除機能\n  deleteTodo(i) {\n    // 削除\n    this.state.todo.splice(i, 1);\n    // 保存\n    this.setState({\n      todo : this.state.todo\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>TODOアプリ</h1>\n        <List todo={this.state.todo} deleteTodo={this.deleteTodo}/>\n        <Input addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}